pragma solidity ^0.8.0;

contract DeFiLendingPlatform {
    address public owner;
    uint256 public totalDeposits;
    mapping(address => uint256) public balances;
    mapping(address => uint256) public borrowAmounts;
    
    constructor() {
        owner = msg.sender;
        totalDeposits = 0;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }
    
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        balances[msg.sender] += msg.value;
        totalDeposits += msg.value;
    }
    
    function borrow(uint256 amount) public {
        require(amount > 0, "Borrow amount must be greater than 0");
        require(amount <= totalDeposits, "Not enough funds available for borrowing");
        require(borrowAmounts[msg.sender] + amount <= balances[msg.sender] * 2, "Borrow limit exceeded");
        
        borrowAmounts[msg.sender] += amount;
        balances[msg.sender] -= amount;
    }
    
    function repay(uint256 amount) public {
        require(amount > 0, "Repay amount must be greater than 0");
        require(amount <= borrowAmounts[msg.sender], "Cannot repay more than borrowed");
        
        borrowAmounts[msg.sender] -= amount;
        balances[msg.sender] += amount;
    }
    
    function withdraw() public {
        uint256 withdrawAmount = balances[msg.sender];
        balances[msg.sender] = 0;
        payable(msg.sender).transfer(withdrawAmount);
    }
    
    function closePlatform() public onlyOwner {
        selfdestruct(payable(owner));
    }
}
