pragma solidity ^0.8.0;

import "./IERC20.sol";

contract DAM {
    address public owner;
    mapping(address => mapping(address => uint256)) public balances;

    event Deposit(address indexed user, address indexed token, uint256 amount);
    event Withdraw(address indexed user, address indexed token, uint256 amount);
    event Invest(address indexed user, uint256 amount);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    function deposit(address tokenAddress, uint256 amount) public {
        require(amount > 0, "Amount must be greater than 0");
        IERC20 token = IERC20(tokenAddress);
        require(token.transferFrom(msg.sender, address(this), amount), "Transfer failed");
        balances[msg.sender][tokenAddress] += amount;
        emit Deposit(msg.sender, tokenAddress, amount);
    }

    function withdraw(address tokenAddress, uint256 amount) public {
        require(amount > 0, "Amount must be greater than 0");
        require(balances[msg.sender][tokenAddress] >= amount, "Insufficient balance");
        IERC20 token = IERC20(tokenAddress);
        balances[msg.sender][tokenAddress] -= amount;
        require(token.transfer(msg.sender, amount), "Transfer failed");
        emit Withdraw(msg.sender, tokenAddress, amount);
    }

    function invest(uint256 amount) public onlyOwner {
        require(amount > 0, "Amount must be greater than 0");
        IERC20 token = IERC20(address(0)); // Replace with actual stablecoin address
        require(balances[msg.sender][address(token)] >= amount, "Insufficient balance");
        balances[msg.sender][address(token)] -= amount;
        emit Invest(msg.sender, amount);
        // Implement investment logic here
    }

    function getBalance(address account, address tokenAddress) public view returns (uint256) {
        return balances[account][tokenAddress];
    }
}
